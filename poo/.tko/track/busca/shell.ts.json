{
    "patches": [
        {
            "label": "2024-11-27_19-09-38",
            "content": "function input(): string { let X: any = input; X.L = X.L || require(\"fs\").readFileSync(0).toString().split(/\\r?\\n/); return X.L.shift(); } // _TEST_ONLY_\n// function input(): string { let X: any = input; X.P = X.P || require(\"readline-sync\"); return X.P.question() } // _FREE_ONLY_\nfunction write(text: any, endl=\"\\n\") { process.stdout.write(\"\" + text + endl); }\n\n\nfunction inside(vet: number[], value: number): boolean {\n    return false;\n}\n\nfunction index_of(vet: number[], value: number): number {\n    return 0;\n}\n\nfunction find_if(vet: number[]): number {\n    return 0;\n}\n\nfunction min_element(vet: number[]): number {\n    return 0;\n}\n\nfunction find_min_if(vet: number[]): number {\n    return 0;\n}\n\n\nfunction main() {\n    while (true) {\n        write(\"$\", \"\");\n        let line = input();\n        write(line); // _TEST_ONLY_\n        \n        let args = line.split(\" \");\n\n        if (args[0] === \"end\")   { \n            break;\n        }\n        else if (args[0] === \"in\"){\n            let result = inside(to_vet(args[1]), +args[2]);\n            write(result ? \"true\" : \"false\");\n        }\n        else if (args[0] === \"index_of\"){\n            let result = index_of(to_vet(args[1]), +args[2]);\n            write(result);\n        }\n        else if (args[0] === \"find_if\"){\n            let result = find_if(to_vet(args[1]));\n            write(result);\n        }\n        else if (args[0] === \"min_element\"){\n            let result = min_element(to_vet(args[1]));\n            write(result);\n        }\n        else if (args[0] === \"find_min_if\"){\n            let result = find_min_if(to_vet(args[1]));\n            write(result);\n        }\n        else {\n            write(\"fail: Comando inv\u00e1lido\");\n        }\n    }\n}\n\nmain();\n\n// Fun\u00e7\u00e3o auxiliar para converter de string para vetor\n// \"[1,2,3,4]\" para [1, 2, 3, 4]\nfunction to_vet(token: string): number[] {\n    let size = token.length;\n    let inside = token.substring(1, size - 1);\n    return inside === \"\" ? [] : inside.split(\",\").map(x => +x)\n}\n"
        }
    ]
}