{
    "patches": [
        {
            "label": "2024-11-27_19-19-11",
            "content": "@@ -893,9 +893,9 @@\n gio \n-%3E\n+%3C\n = 4)\n"
        },
        {
            "label": "2024-11-27_19-22-03",
            "content": "function input(): string { let X: any = input; X.L = X.L || require(\"fs\").readFileSync(0).toString().split(/\\r?\\n/); return X.L.shift(); } // _TEST_ONLY_\n//function input(): string { let X: any = input; X.P = X.P || require(\"readline-sync\"); return X.P.question() } // _FREE_ONLY_\nfunction write(text: any, endl=\"\\n\") { process.stdout.write(\"\" + text + endl); }\nexport {};\n\nclass Animal{\n    especie: string;\n    estagio: number;\n    barulho: string;\n\n    constructor(especie: string, barulho: string){\n        this.especie = especie;\n        this.barulho = barulho;\n        this.estagio = 0;\n\n    }\n    fazerBarulho(): string {\n        if(this.estagio == 0){\n            return \"---\";    \n        }\n        if (this.estagio == 4){\n            return \"RIP\";\n        }\n        return this.barulho;\n    }\n    \n    envelhecer(qtd: number): void{\n        this.estagio += qtd;\n        if(this.estagio >= 4){\n            console.log(`warning: ${this.especie} morreu`)\n            this.estagio = 4;\n        }\n    }\n    \n    toString(): string {\n        return `${this.especie}:${this.estagio}:${this.barulho}`\n    }\n\n\n}\n\nclass Adapter {\n    animal: Animal = new Animal(\"\", \"\");\n    init(especie: string, barulho: string): void {\n        this.animal = new Animal(especie, barulho);\n    }\n\n    grow(qtd: number): void {\n        this.animal.envelhecer(qtd);\n    }\n\n    noise(): void {\n        console.log(this.animal.fazerBarulho());\n    }\n\n    // mostra a representa\u00e7\u00e3o do animal como texto\n    // no formato \"{especie}:{estagio}:{barulho}\"\n    show(): void {\n        console.log(this.animal.toString());\n    }\n}\n\n\nfunction main(): void {\n    let adp: Adapter = new Adapter();\n\n    while (true) {\n        write(\"$\", \"\");\n        const line: string = input();\n        const args: string[] = line.split(' ');\n        write(line); //_TEST_ONLY_\n\n        if      (args[0] === \"end\"  ) { break;                               }\n\n        else if (args[0] === \"init\" ) { adp.init(args[1], args[2]); }\n        else if (args[0] === \"grow\" ) { adp.grow(parseInt(args[1]));         }\n        else if (args[0] === \"noise\") { adp.noise();                         }\n        else if (args[0] === \"show\" ) { adp.show();                          }\n\n        else                          { write(\"fail: comando invalido\");     }\n    }\n}\n\nmain();\n"
        }
    ]
}